@inject Grand.Infrastructure.Configuration.AppConfig config
<!DOCTYPE html>
<html use-lang="true">
<head>
    <title asp-default-title="true"></title>
    <meta charset="utf-8">
    <meta-description>
    <meta-keywords>
    <meta name="generator" content="grandnode">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
    @RenderSection("meta", required: false)    
    <head-custom>
    <partial name="PoplHead" />
    <vc:widget widget-zone="head_html_tag" additional-data="null"></vc:widget>
    <canonical-urls>
    @*Favicon - upload favicon.ico file to the wwwroot directory*@
    <partial name="_Favicons" />
    @if (config.DisplayMiniProfilerInPublicStore)
    {
        <mini-profiler />
    }
    <resources asp-type="HeadLink" />
    <resources asp-type="HeadScript" />
    @RenderSection("head", required: false)    
</head>
<body>

    <resources asp-type="TemplateHeader" />
    <resources asp-type="ScriptHeader" />

    @await Component.InvokeAsync("Widget", new { widgetZone = "body_start_html_tag_after" })

    <div id="app" :dark-theme="darkMode" v-cloak>
        <div class="page-loader-container">
            <div class="page-loader"></div>
        </div>
        <vc:get-coordinate></vc:get-coordinate>
        <partial name="PoplHeader" />


            @await Component.InvokeAsync("Widget", new { widgetZone = "content_before" })
            @if (IsSectionDefined("Breadcrumb"))
            {
                @RenderSection("Breadcrumb")
            }
            @RenderBody()
            @await Component.InvokeAsync("Widget", new { widgetZone = "content_after" })
            <vc:voice-navigation></vc:voice-navigation>

        @*@await Component.InvokeAsync("Footer")*@
        <partial name="_Cookie" />
        <partial name="_Notifications" />
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = "body_end_html_tag_before" })


    <!--aha.com ---------------------------------------------- !-->
    <script>
        var my_global = {
            user_device_has_touch:false,
            user_device_has_mouse:false,
            user_device_is_mobile:false,
        };

        if (window.matchMedia("(any-pointer: coarse)").matches) {
            my_global.user_device_has_touch = true;
        }
        if (matchMedia('(pointer:fine)').matches) {
            my_global.user_device_has_mouse = true;
        }

        my_global.user_device_is_mobile = (typeof window.orientation !== "undefined") || (navigator.userAgent.indexOf('IEMobile') !== -1);
        


        my_global.isOverFlown = function(element) {

            if(!element.children || element.children.length<2){
                console.error('خطا: isOverFlown method error: element whithout 2 children');
                return false;
            }

            const elementHeight = element.getBoundingClientRect().height;
            if(elementHeight==0){
                console.error('خطا: isOverflown method error: element is hide');
                return false;
            }



            let prevItem = {};
            let currItem = {};

            for(let i=0;i<element.children.length;i++){
                const subElement = element.children[i];

                currItem = subElement.getBoundingClientRect();
                if (prevItem && prevItem.top < currItem.top) {
                    return true;
                }
                prevItem = currItem;
            }

            return false;

        }

        my_global.toggler=function(item){

            if (!item) return;

            var dataToggle = item.getAttribute('data-toggled');
            if (!dataToggle) {
                my_global.toggler_setToggled(item);
            }else{
                my_global.toggler_removeToggled(item);
            }
        }

        my_global.toggler_setToggled = function(item) {
            item.setAttribute('data-toggled', 'true');
        }
        my_global.toggler_removeToggled = function(item) {
            item.removeAttribute('data-toggled');
        }



        my_global.isMoblieMode=function(){
            var style = window.getComputedStyle(document.body, ':after');
            return style.content == '"is-moblie"';
        }

        my_global.foundViewPortDimensions=function(){

             const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
            const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);

            return {w: vw, h: vh};

        }
    </script>
    <!--aha.com ---------------------------------------------- !-->

    <resources asp-type="ScriptFooter" />
    <resources asp-type="TemplateFooter" />
</body>
</html>


